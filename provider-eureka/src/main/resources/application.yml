#****************SpringBoot服务端口****************
server:
  port: 2000

spring:
  profiles:
    #SpringBoot引入其他公共的配置信息
    include: public

  #****************SpringBoot集成datasource****************
  datasource:
    name: db_mysql
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      driver-class-name: com.mysql.cj.jdbc.Driver
      url: jdbc:mysql://127.0.0.1:3306/cloudtest?useUnicode=true;characterEncoding=UTF-8;useSSL=false;serverTimezone=Asia/Shanghai
      username: root
      password: 1qaz2wsx
      initial-size: 1
      max-active: 1000
      min-evictable-idle-time-millis: 30000
      max-pool-prepared-statement-per-connection-size: 100
      max-wait: 6000
      min-idle: 1
      pool-prepared-statements: false
      test-on-borrow: false
      test-on-return: false
      test-while-idle: false
      time-between-eviction-runs-millis: 6000

  #****************SpringBoot集成Redis****************
  redis:
    database: 0
    host: www.kangyong.xyz
    password: Imissyou@4116
    port: 6379
    #连接超时时间(毫秒)
    timeout: 3s
    #采用Jedis连接，如果是在多线程的环境下,它是非线程安全的。
    #这个时候只有使用连接池,为每一个Jedis实例增加物理连接
    #    jedis:
    #      pool:
    #        max-active: 8
    #        max-idle: 8
    #        min-idle: 1
    #        max-wait: 3s
    #        time-between-eviction-runs: 3000
    #****************Lettuce连接配置****************
    #Lettuce的连接，连接是基于Netty的，连接实例(StatefulRedisConnection) 可以在多个线程之间并发访问
    #因为StatefulRedisConnection是线程安全的，一个实例连接就可以满足多线程环境，也可以自定义伸缩
    lettuce:
      pool:
        # 连接池最大连接数(使用负值表示没有限制)
        max-active: 8
        # 连接池中的最大空闲连接
        max-idle: 8
        # 连接池中的最小空闲连接
        min-idle: 1
        # 连接池最大阻塞等待时间(如果超过此时间将接到异常,设为-1表示无限制)
        max-wait: 3s
        # 空闲链接检测线程检测周期毫秒（负值表示不检测）(类型为Duration，添加秒)
        time-between-eviction-runs: 3000
      # 关闭超时时间
      shutdown-timeout: 100

#****************SpringBoot集成Mybatis****************
mybatis:
  config-location: classpath:mybatis/config/mybatis-config.xml
  mapper-locations: classpath:mybatis/**/mapper/*Mapper.xml,classpath*:mybatis/**/mapper-base/*Mapper.xml

#****************Eureka配置****************
#Eureka服务提供者的URL(多个地址用 , 分隔)
#eureka-service-url: http://localhost:1000/eureka-stand-alone/eureka/
eureka-service-url: http://localhost:1001/eureka-nodes/eureka/,http://localhost:1002/eureka-nodes/eureka/,http://localhost:1003/eureka-nodes/eureka/
# Eureka配置
eureka:
  client:
    #与Eureka Server交互的地址，查询服务和注册服务都依赖这个地址(默认: http://localhost:8761/eureka/ ,多个地址用 , 分隔)
    #spring.application.name 为 Eureka Server 指定注册的应用名称
    service-url:
      defaultZone: ${eureka-service-url}
  instance:
    #是否将自己的 IP 注册到 Eureka Server(默认 false,表示注册微服务所在操作系统的 hostname 到Eureka Server)
    prefer-ip-address: true
    appname: ${spring.application.name}
    home-page-url-path: /${server.servlet.context-path}
    health-check-url-path: ${server.servlet.context-path}/actuator/health
    status-page-url-path: ${server.servlet.context-path}/actuator/info
    #Eureka可以自定义key-value的元数据
    metadata-map:
      service-function: 这是一个服务提供者
