#****************SpringBoot服务端口****************
server:
  port: 2000
  servlet.context-path: /@project.artifactId@

spring:
  application:
    name: @project.artifactId@
  #SpringBoot引入其他公共的配置信息
  profiles:
    include: public

  #****************SpringBoot配置datasource****************
  datasource:
    name: db_mysql
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: oracle.jdbc.driver.OracleDriver
    druid:
      #基本属性 url、user、password
      url: jdbc:oracle:thin:@10.200.4.15:1521:lvmamadb
      username: lvmama_super
      password: oU7Reu3nLh
      #配置初始化大小、最小、最大
      initial-size: 5
      min-idle: 10
      max-active: 20
      #配置获取连接等待超时的时间
      max-wait: 60000
      #配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 2000
      #配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 600000
      max-evictable-idle-time-millis: 900000
      #其他配置
      test-while-idle: true
      test-on-borrow: true
      test-on-return: false
      keep-alive: true

  #****************SpringBoot集成Redis****************
  redis:
    database: 0
    host: www.kangyong.xyz
    password: Imissyou@4116
    port: 6379
    #连接超时时间(毫秒)
    timeout: 3s
    #采用Jedis连接，如果是在多线程的环境下,它是非线程安全的。
    #这个时候只有使用连接池,为每一个Jedis实例增加物理连接
    #    jedis:
    #      pool:
    #        max-active: 8
    #        max-idle: 8
    #        min-idle: 1
    #        max-wait: 3s
    #        time-between-eviction-runs: 3000
    #****************Lettuce连接配置****************
    #Lettuce的连接，连接是基于Netty的，连接实例(StatefulRedisConnection) 可以在多个线程之间并发访问
    #因为StatefulRedisConnection是线程安全的，一个实例连接就可以满足多线程环境，也可以自定义伸缩
    lettuce:
      pool:
        # 连接池最大连接数(使用负值表示没有限制)
        max-active: 8
        # 连接池中的最大空闲连接
        max-idle: 8
        # 连接池中的最小空闲连接
        min-idle: 1
        # 连接池最大阻塞等待时间(如果超过此时间将接到异常,设为-1表示无限制)
        max-wait: 3s
        # 空闲链接检测线程检测周期毫秒（负值表示不检测）(类型为Duration，添加秒)
        time-between-eviction-runs: 3000
      # 关闭超时时间
      shutdown-timeout: 100

#****************SpringBoot集成Mybatis****************
mybatis:
  config-location: classpath:mybatis/config/mybatis-config.xml
  mapper-locations: classpath:mybatis/**/mapper/*Mapper.xml,classpath*:mybatis/**/mapper-base/*Mapper.xml

#****************Eureka配置****************
#Eureka服务提供者的URL(多个地址用 , 分隔)
eureka-service-url: http://127.0.0.1:1000/eureka-stand-alone/eureka/
#eureka-service-url: http://127.0.0.1:1001/eureka-nodes/eureka/,http://127.0.0.1:1002/eureka-nodes/eureka/,http://127.0.0.1:1003/eureka-nodes/eureka/
# Eureka配置
eureka:
  client:
    #与Eureka Server交互的地址，查询服务和注册服务都依赖这个地址(默认: http://localhost:8761/eureka/ ,多个地址用 , 分隔)
    #spring.application.name 为 Eureka Server 指定注册的应用名称
    service-url:
      defaultZone: ${eureka-service-url}
  instance:
    #是否将自己的 IP 注册到 Eureka Server(默认 false,表示注册微服务所在操作系统的 hostname 到Eureka Server)
    prefer-ip-address: true
    #Eureka客户端向服务端发送心跳的时间间隔，默认15秒
    lease-renewal-interval-in-seconds: 5
    #Eureka服务端在收到最后一次心跳之后等待的时间上限，超过则剔除（客户端告诉服务端按照此规则等待自己），默认90秒
    lease-expiration-duration-in-seconds: 15
    #Eureka可以自定义key-value的元数据
    metadata-map:
      service-function: 这是一个服务提供者
